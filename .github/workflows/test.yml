name: Run Tests on Push

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check Docker version
        run: docker --version

      - name: Check Docker Compose
        run: docker compose version

      - name: Set up Docker Compose
        run: docker compose -f application/docker-compose.yml up -d test-db

      - name: Wait for MySQL to be ready
        run: |
          for i in {1..30}; do
            if docker exec $(docker ps --filter name=test-db --format "{{.ID}}") mysqladmin ping -h"test-db" -u root --password=root --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Check MySQL Container Logs
        run: docker logs $(docker ps --filter name=test-db --format "{{.ID}}") || true

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Run Spring Boot to create tables
        run: |
          nohup ./gradlew :application:bootRun > application.log 2>&1 &
          for i in {1..30}; do
            if curl -s http://localhost:8080/actuator/health | grep UP; then
              echo "Spring Boot is ready, and tables are created!"
              break
            fi
            echo "Waiting for Spring Boot to initialize..."
            sleep 5
          done
          if ! curl -s http://localhost:8080/actuator/health | grep UP; then
            echo "Spring Boot failed to start."
            cat application.log
            exit 1
          fi

      - name: Print application logs on failure
        if: failure()
        run: cat application.log

      - name: Insert test data into MySQL
        run: |
          docker exec $(docker ps --filter name=test-db --format "{{.ID}}") sh -c 'exec mysql -u testuser -ptestpassword testdb < /docker-entrypoint-initdb.d/test-data.sql'

      - name: Run tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://test-db:3306/testdb
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
        run: ./gradlew :application:test

      - name: Tear down Docker Compose
        if: always()
        run: docker compose -f application/docker-compose.yml down
