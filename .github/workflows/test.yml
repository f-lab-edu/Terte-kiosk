name: Run Tests on Push

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start MySQL test container
        run: |
          docker run -d --name test-db \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=terte_db \
            -e MYSQL_USER=test_user \
            -e MYSQL_PASSWORD=test \
            -p 3307:3306 \
            mysql:8.0

      - name: Wait for MySQL
        run: |
          echo "Waiting for MySQL..."
          until docker exec test-db mysql -u test_user -ptest -e "SELECT 1"; do
            sleep 2
          done
          echo "MySQL is ready."

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Wait for MySQL to be fully ready
        run: |
          echo "Waiting for MySQL to initialize completely..."
          until docker exec test-db mysql -u test_user -ptest -e "SELECT 1 FROM terte_db.some_table LIMIT 1"; do
            echo "MySQL is not ready yet..."
            sleep 2
          done
          echo "MySQL is fully initialized!"

      - name: Run Spring Boot & Wait
        run: |
          nohup ./gradlew :application:bootRun > application.log 2>&1 &
          until curl -s http://localhost:8080/actuator/health | grep UP; do
            echo "Waiting for Spring Boot to be ready..."
            sleep 5
          done
          echo "Spring Boot is up and running!"

      - name: Insert test data
        run: docker exec -i test-db mysql -u test_user -ptest terte_db < src/test/resources/sql/test-data.sql

      - name: Run tests
        env:
          SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3307/terte_db?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=Asia/Seoul
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test
        run: ./gradlew :application:test

      - name: Tear down MySQL container
        if: always()
        run: docker stop test-db && docker rm test-db
